import { useState, useEffect } from 'react';

export interface ExecutiveSummaryData {
  uei: string;
  contractorName: string;
  naicsCodes?: string[];
  pscCodes?: string[];
  agencies?: string[];
  partners?: string[];
  contractTypes?: string[];
  recentAwards?: any[];
}

export interface ExecutiveSummary {
  headline: string; // ≤40 chars
  principalActivity: string; // ≤90 chars
  bulletPoints: string[]; // 3 bullets, ≤55 chars each
  generatedAt: string;
  source: 'ai' | 'cached';
}

export interface ExecutiveSummaryResponse {
  summary: ExecutiveSummary;
}

/**
 * React hook for generating and managing executive summaries
 */
export function useExecutiveSummary(data: ExecutiveSummaryData | null) {
  const [summary, setSummary] = useState<ExecutiveSummary | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!data || !data.uei || !data.contractorName) {
      setSummary(null);
      return;
    }

    generateSummary(data);
  }, [data]);

  const generateSummary = async (summaryData: ExecutiveSummaryData) => {
    setIsLoading(true);
    setError(null);

    try {
      // Check if API endpoint exists by doing a simple fetch
      const response = await fetch('/api/v1/executive-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(summaryData)
      });

      if (!response.ok) {
        // If API doesn't exist, fall back gracefully without setting error
        console.warn('Executive summary API not available, using fallback content');
        setSummary(null);
        return;
      }

      const result: ExecutiveSummaryResponse = await response.json();
      setSummary(result.summary);

      // Log for debugging
      console.log(
        `Executive summary ${result.summary.source === 'cached' ? 'loaded from cache' : 'generated by AI'} for ${summaryData.contractorName}:`,
        result.summary
      );

    } catch (err) {
      // For network errors or API not existing, don't set error state - just use fallback
      console.warn('Executive summary API not available, using fallback content:', err);
      setSummary(null);
      setError(null);
    } finally {
      setIsLoading(false);
    }
  };

  const regenerateSummary = () => {
    if (data) {
      generateSummary(data);
    }
  };

  return {
    summary,
    isLoading,
    error,
    regenerateSummary,
    isFromCache: summary?.source === 'cached'
  };
}

/**
 * Utility function to format contractor data for executive summary generation
 */
export function formatContractorDataForSummary(
  contractor: any,
  activityEvents: any[] = [],
  metrics: any = {}
): ExecutiveSummaryData | null {
  if (!contractor?.uei || !contractor?.name) {
    return null;
  }

  // Ensure activityEvents is an array
  const safeActivityEvents = Array.isArray(activityEvents) ? activityEvents : [];

  // Extract NAICS codes from activity events
  const naicsCodes = Array.from(new Set(
    safeActivityEvents
      .map(event => event?.naics_code)
      .filter(Boolean)
  )) as string[];

  // Extract PSC codes from activity events
  const pscCodes = Array.from(new Set(
    safeActivityEvents
      .map(event => event?.psc_code)
      .filter(Boolean)
  )) as string[];

  // Extract agencies
  const agencies = Array.from(new Set(
    safeActivityEvents
      .map(event => event?.awarding_agency_name)
      .filter(Boolean)
  )) as string[];

  // Extract partners/recipients from subawards
  const partners = Array.from(new Set(
    safeActivityEvents
      .filter(event => event?.event_type === 'SUBAWARD')
      .map(event => event?.recipient_name)
      .filter(Boolean)
  )) as string[];

  // Extract contract types
  const contractTypes = Array.from(new Set(
    safeActivityEvents
      .map(event => event?.contract_pricing_type)
      .filter(Boolean)
  )) as string[];

  // Get recent awards for additional context
  const recentAwards = safeActivityEvents
    .filter(event => event?.event_date)
    .sort((a, b) => new Date(b.event_date).getTime() - new Date(a.event_date).getTime())
    .slice(0, 5);

  return {
    uei: contractor.uei,
    contractorName: contractor.name,
    naicsCodes: naicsCodes.slice(0, 5), // Top 5 NAICS
    pscCodes: pscCodes.slice(0, 5), // Top 5 PSCs
    agencies: agencies.slice(0, 3), // Top 3 agencies
    partners: partners.slice(0, 3), // Top 3 partners
    contractTypes: contractTypes.slice(0, 3), // Top 3 contract types
    recentAwards
  };
}